#! /usr/bin/env bash
#
#   Copyright (c) 2015-2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = "YES" ] && set -x && : "$0" "$@"

MULLE_EXECUTABLE_VERSION=0.2.18


#
# This is the main user interface to mulle-dispense
# sorta like git
#

print_commands()
{
   local  show_all="${1:-NO}"

   SHOWN_COMMANDS="\
   dispense      : copy files [default]
   version       : print ${MULLE_USAGE_NAME} version"

   HIDDEN_COMMANDS="\
   libexec-dir  : print path to ${MULLE_USAGE_NAME} libexec
   uname         : ${MULLE_USAGE_NAME}'s simplified uname(1)"

   echo "${SHOWN_COMMANDS}"

   if [ "${show_all}" != "NO" ]
   then
      echo "${HIDDEN_COMMANDS}"
   fi
}


print_flags()
{
   cat <<EOF
   -f            : force operation
EOF

   options_technical_flags_usage "         : "
}


usage()
{
   local verbose="${1:-NO}"

   cat <<EOF
Usage:
   ${MULLE_USAGE_NAME} [flags] [command] [options] <srcdir> <dstdir>

   Distribute build product files in a uniform fashion.

Flags:
EOF

   print_flags | LC_ALL=C sort

   cat <<EOF

Commands:
EOF

   print_commands "${verbose}"

   if [ "${verbose}" = "NO" ]
   then
      cat <<EOF
      (use mulle-dispense -v help to show more commands)
EOF
   fi

   cat <<EOF

Options are command specific. Use ${MULLE_USAGE_NAME} <command> -h for help.
EOF

   exit 1
}


main()
{
   local MULLE_FLAG_ANSWER="ASK"
   local MULLE_FLAG_MAGNUM_FORCE="NONE"
   local MULLE_FLAG_IGNORE_GRAVEYARD="NO"

   # technical flags
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN="NO"
   local MULLE_FLAG_LOG_LOCAL="NO"
   local MULLE_FLAG_LOG_DEBUG="NO"
   local MULLE_FLAG_LOG_EXEKUTOR="NO"
   local MULLE_FLAG_LOG_FLUFF="NO"
   local MULLE_FLAG_LOG_SCRIPTS="NO"
   local MULLE_FLAG_LOG_SETTINGS="NO"
   local MULLE_FLAG_LOG_VERBOSE="NO"
   local MULLE_FLAG_LOG_MERGE="NO"
   local MULLE_TRACE_POSTPONE="NO"

   local FLAG_LS="NO"

   #
   # simple option handling
   #
   local argument

   while [ "$#" -ne 0 ]
   do
      argument="$1"

      if options_technical_flags "${argument}"
      then
         shift
         continue
      fi

      case "${argument}" in
         -f|--force)
            MULLE_FLAG_MAGNUM_FORCE="BOTH"
         ;;

         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         --version)
            echo "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -ls)
            FLAG_LS="YES"
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"${argument}\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}"

   local cmd

   cmd="${argument:-dispense}"

   # it argument looks like a or an option path, make it a dispense
   case "${argument}" in
      *-*|*/*|*.*)
         argument="dispense"
      ;;

      *)
         [ "$#" -ne 0 ] && shift
      ;;
   esac

   case "${cmd}" in
      copy|dispense)
         # shellcheck source=src/mulle-dispense-build.sh
         . "${MULLE_DISPENSE_LIBEXEC_DIR}/mulle-dispense-copy.sh"

         dispense_copy_main "$@"
      ;;

      libexec-dir|library-path)
         echo "${MULLE_DISPENSE_LIBEXEC_DIR}"
      ;;

      uname)
         echo "${MULLE_UNAME}"
      ;;

      version)
         echo "${MULLE_EXECUTABLE_VERSION}"
         return 0
      ;;

      *)
         log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown command \"${cmd}\""
         usage "${MULLE_TRACE}"
      ;;
   esac
}



########
###
### INIT
###
_init()
{
   #
   # minimal setup exit
   #
   if [ "$1" = "version" ]
   then
      echo "${MULLE_EXECUTABLE_VERSION}"
      exit 0
   fi

   if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
   then
      MULLE_BASHFUNCTIONS_LIBEXEC_DIR="`mulle-bashfunctions-env libexec-dir 2> /dev/null`"
      if [ -z "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}" ]
      then
         if [ -z "`command -v "mulle-bashfunctions-env"`" ]
         then
            echo "Fatal Error: Could not find mulle-bashfunctions-env in PATH (not installed ?)" >&2
         else
            echo "Fatal Error: Could not find libexec of mulle-bashfunctions-env ($PWD)" >&2
         fi
         exit 1
      fi
   fi

      # shellcheck source=../mulle-bashfunctions/src/mulle-string.sh
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-bashfunctions.sh" "minimal" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-path.sh" &&
   . "${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}/mulle-file.sh" ||
      fail "failed to load bashfunctions from ${MULLE_BASHFUNCTIONS_LIBEXEC_DIR}"

   local _libexec_dir

   _get_libexec_dir "$0" "mulle-dispense" "mulle-dispense-copy.sh"

   MULLE_DISPENSE_LIBEXEC_DIR="${_libexec_dir}"

   #
   # minimal setup exit
   #
   case "$1" in
      "libexec-dir"|"library-path")
         echo "${MULLE_DISPENSE_LIBEXEC_DIR}"
         exit 0
      ;;
   esac

   #  set -e # more pain then gain in the end
   #  set -u # doesn't work with my style

   set -o pipefail
}
###
### INIT
###
########



#
# leading backslash ? looks like we're getting called from
# mingw via a .BAT or so
#
case "$PATH" in
   '\\'*)
      PATH="${PATH//\\/\/}"
   ;;
esac


_init "$@" # needs params
main "$@"

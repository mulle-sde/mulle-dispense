#! /usr/bin/env mulle-bash
#
# shellcheck shell=bash
# shellcheck disable=SC2236
# shellcheck disable=SC2166
# shellcheck disable=SC2006
# shellcheck disable=SC1090
# shellcheck disable=SC1091
#
#   Copyright (c) 2017 Nat! - Mulle kybernetiK
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.
#
[ "${TRACE}" = 'YES' ] && set -x && : "$0" "$@"


MULLE_EXECUTABLE_VERSION='0.0.2'


r_map_filename()
{
   RVAL="$1"
}


#
# removes destination directory if it exists
#
main()
{
   local MULLE_TRACE
   local MULLE_FLAG_EXEKUTOR_DRY_RUN='NO'
   local MULLE_FLAG_LOG_LOCAL='NO'
   local MULLE_FLAG_LOG_DEBUG='NO'
   local MULLE_FLAG_LOG_EXEKUTOR='NO'
   local MULLE_FLAG_LOG_FLUFF='NO'
   local MULLE_FLAG_LOG_SCRIPTS='NO'
   local MULLE_FLAG_LOG_SETTINGS='NO'
   local MULLE_FLAG_LOG_VERBOSE='NO'
   local MULLE_FLAG_LOG_MERGE='NO'
   local MULLE_TRACE_POSTPONE='NO'

   #
   # simple option handling
   #
   local argument
   local cmd='mv'
   local script

   while [ "$#" -ne 0 ]
   do
      argument="$1"

      if options_technical_flags "${argument}"
      then
         shift
         continue
      fi

      case "${argument}" in
         -h*|--help|help)
            usage "${MULLE_TRACE}"
         ;;

         --version)
            printf "%s\n" "${MULLE_EXECUTABLE_VERSION}"
            exit 0
         ;;

         -c)
            cmd='cp -p'
         ;;

         -f)
            # actually sent
         ;;


         -m)
            [ $# -eq 1 ] && fail "Missing argument to \"$1\""
            shift

            script="${1//&percnt;/%}"
            script="${script//&amp;/&}"
            eval "${script}" || exit 1
         ;;

         -n)
            # actually sent
         ;;

         -*)
            log_error "${MULLE_EXECUTABLE_FAIL_PREFIX}: Unknown option \"${argument}\""
            usage "${MULLE_TRACE}"
         ;;

         *)
            break
         ;;
      esac

      shift
   done

   options_setup_trace "${MULLE_TRACE}" && set -x


   if [ $# -lt 2 ]
   then
      fail "usage: mulle-dispense-mv-force [-c] [-m mapper] <source> <destination-dir>
                   Removes destination directory if it exists.
                   Use -c to copy
                   Use -m to define a filename mapping function"
   fi

   log_debug "script: ${script}"

   # additional options prepend
   local arguments

   while [ $# -gt 2 ]
   do
      r_concat "${arguments}" "'$1'"
      arguments="${RVAL}"
      shift
   done

   local src="$1"
   local dst="$2"

   [ -z "${src}" ] && fail "empty source is not allowed"
   [ -z "${dst}" ] && fail "empty destination is not allowed"

   # cases:  | source is      | destination is | action           |
   #         |----------------|----------------|------------------|
   #         | symlink        | directory      | rmdir ; ln -a    |
   #         | symlink        | file           | rm ; ln -a       |
   #         | symlink        | symlink        | rm ; ln -a       |
   #         | symlink        | not present    | mkdir .. ; ln    |
   #         | file           | directory      | rmdir ; cp -a    |
   #         | file           | file           | rm ; cp -a       |
   #         | file           | symlink        | rm ; cp -a       |
   #         | file           | not present    | mkdir .. ; cp -A |
   #         | directory      | directory      | rmdir ; cp -Ra   |
   #         | directory      | file           | rm ; cp -Ra      |
   #         | directory      | symlink        | rm ; cp -Ra      |
   #         | directory      | not present    | cp -Ra           |
   #
   # We don't really mind if we use -R on a file so that sim.
   # If we do things optimistically, we can postpone the mkdir in
   # the failure case

   dst="${dst%/}/" # ensure it has a '/' trailing

  local name

   r_basename "${src}"
   name="${RVAL}"

   [ -z "${name}" ] && _internal_fail "empty filename for \"${src}\""

   local mapped_name

   r_map_filename "${name}" # defined by -m hopefully
   mapped_name="${RVAL}"

   [ -z "${mapped_name}" ] && _internal_fail "mapping function returned empty for \"${name}\""

   local dstfile

   r_filepath_concat "${dst}" "${mapped_name}"
   dstfile="${RVAL}"

   remove_file_if_present "${dstfile}"
   mkdir_if_missing "${dst}"

   # in case it's a directory
   if [ -d "${dstfile}" ]
   then
      r_assert_sane_path "${dstfile}"
      case "${MULLE_UNAME}" in
         'sunos')
            exekutor chmod -R ugo+wX "${dstfile}" 2> /dev/null
         ;;
         *)
            exekutor chmod -R ugo+wX "${dstfile}" >&2 || fail "Failed to make ${dstfile} writable"
         ;;
      esac
      exekutor rm -rf "${dstfile}" >&2 || fail "failed to remove \"${dstfile}\""
   fi

   eval_exekutor "${cmd} -f ${arguments} '${src}' '${dstfile}'"
}


call_with_flags "main" "${MULLE_DISPENSE_MV_FORCE_FLAGS}" "$@"
